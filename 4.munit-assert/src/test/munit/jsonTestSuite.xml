<?xml version="1.0" encoding="UTF-8" standalone="no"?><mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="   http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd   http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd   http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="jsonTestSuite.xml"/>
	<munit:test description="Test" doc:id="53910c94-91ec-4f6d-9776-27cd1be41068" name="payloadJSONExpectedSuccessTestCase">
		<munit:execution>
			<flow-ref doc:id="93edc414-9e5e-436c-8061-f91530b1de66" doc:name="Flow-ref to getJSONObject" name="getJSONObject"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:name="Assert that - Payload as Expected" doc:id="b32aabaf-8f86-47ec-b014-50fe8df9b1ad" is="#[MunitTools::equalTo(readUrl('classpath://payloadResponse.json', 'application/json'))]" message='#["The response payload is incorrect"]' expression="#[payload]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="categoryMatchSuccessTestCase" doc:id="4510258a-6d50-4b77-8ac6-9e8c98a07cab" description="Test" >
		<munit:behavior>
			<set-variable value='#[["obstetric", "breast pain", "dermatology", "gyne"] as Array]' doc:name="medicalCategories" doc:id="57324c1e-c1e2-4527-8c35-a6c189b2d8ee" variableName="medicalCategories"/>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="77b00608-7d19-40b6-8411-9d584fd11fce" name="getJSONObject" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert expression - medical category exists" doc:id="5fb91bae-2ccf-4e96-82d6-d9670cb898ca" message='#["The medical category in the payload does not exist"]'>
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload.category must beOneOf(vars.medicalCategories)]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="feeValueSuccessTestCase" doc:id="7d77834e-6c00-4301-999d-6dded3dec5cd" description="Test" >
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="775fdff1-fdad-4234-a872-8bfa8275c09f" name="getJSONObject" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:name="Assert that - fee exists and is greater or equal to 100" doc:id="e5443910-7719-42ec-bee6-906b1531563a" expression="#[payload.cost]" is="#[MunitTools::both(MunitTools::greaterThanOrEqualTo(100), MunitTools::notNullValue())]" message='#["The medical fee is not valid"]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="payloadMediaTypeSuccessCase" doc:id="0daf39f3-5985-4230-a350-1d9b5760b75e" description="Test" >
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="4c9c3908-1e6c-495f-8d5e-b2c0033c2cd1" name="getJSONObject" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - payload media type is JSON" doc:id="6e8565d0-86f6-4f57-bf0b-4ba2ed214ac8" message='#["The media type of the response is incorrect"]' expression="#[payload]" is="#[MunitTools::withMediaType('application/json')]" />
		</munit:validation>
	</munit:test>


</mule>